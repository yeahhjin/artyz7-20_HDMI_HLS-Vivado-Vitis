-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter_sobel_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    t2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    t1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    m2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    m0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of sobel_filter_sobel_core is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal sub_ln27_fu_148_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln27_reg_307 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal gx_fu_168_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal gx_reg_312 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln31_fu_190_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln31_reg_318 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_328 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_reg_333 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln26_fu_82_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln22_fu_86_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal gx_l_fu_90_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_fu_100_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_1_fu_104_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln23_fu_108_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_2_fu_126_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_1_fu_134_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal gx_r_fu_138_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_114_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln22_fu_96_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln24_fu_144_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_fu_158_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln30_1_fu_164_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln30_fu_154_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal gy_r_fu_174_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_3_fu_180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_fu_130_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal gy_l_fu_184_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_1_fu_122_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_204_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln31_fu_215_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln28_fu_211_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ax_fu_224_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal gy_fu_218_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ay_fu_243_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ax_1_fu_229_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ay_1_fu_249_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln38_1_fu_261_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln38_fu_257_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_fu_273_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln38_1_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln40_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_fu_300_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal t2_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal m2_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal m0_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b1_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_ln40_reg_333 <= add_ln40_fu_289_p2;
                gx_reg_312 <= gx_fu_168_p2;
                sub_ln27_reg_307 <= sub_ln27_fu_148_p2;
                sub_ln31_reg_318 <= sub_ln31_fu_190_p2;
                tmp_6_reg_323 <= gx_fu_168_p2(10 downto 10);
                tmp_8_reg_328 <= mag_fu_273_p2(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln40_fu_300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                b1_val_int_reg <= b1_val;
                b2_val_int_reg <= b2_val;
                m0_val_int_reg <= m0_val;
                m2_val_int_reg <= m2_val;
                t1_val_int_reg <= t1_val;
                t2_val_int_reg <= t2_val;
            end if;
        end if;
    end process;
    add_ln30_fu_158_p2 <= std_logic_vector(signed(sext_ln22_fu_96_p1) + signed(sext_ln24_fu_144_p1));
    add_ln40_fu_289_p2 <= std_logic_vector(unsigned(trunc_ln38_1_fu_269_p1) + unsigned(trunc_ln38_fu_265_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln40_fu_300_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln40_fu_300_p3;
        else 
            ap_return <= "XXXXXXXX";
        end if; 
    end process;

    ax_1_fu_229_p3 <= 
        ax_fu_224_p2 when (tmp_6_reg_323(0) = '1') else 
        gx_reg_312;
    ax_fu_224_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(gx_reg_312));
    ay_1_fu_249_p3 <= 
        ay_fu_243_p2 when (tmp_7_fu_235_p3(0) = '1') else 
        gy_fu_218_p2;
    ay_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(gy_fu_218_p2));
    gx_fu_168_p2 <= std_logic_vector(signed(sext_ln30_1_fu_164_p1) + signed(sext_ln30_fu_154_p1));
    gx_l_fu_90_p2 <= std_logic_vector(unsigned(zext_ln26_fu_82_p1) - unsigned(zext_ln22_fu_86_p1));
    gx_r_fu_138_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_126_p1) - unsigned(zext_ln24_1_fu_134_p1));
    gy_fu_218_p2 <= std_logic_vector(signed(sext_ln31_fu_215_p1) + signed(sext_ln28_fu_211_p1));
    gy_l_fu_184_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_180_p1) - unsigned(zext_ln24_fu_130_p1));
    gy_r_fu_174_p2 <= std_logic_vector(unsigned(zext_ln26_fu_82_p1) + unsigned(zext_ln22_fu_86_p1));
    icmp_ln40_fu_295_p2 <= "1" when (signed(tmp_8_reg_328) > signed(ap_const_lv4_0)) else "0";
    mag_fu_273_p2 <= std_logic_vector(signed(sext_ln38_1_fu_261_p1) + signed(sext_ln38_fu_257_p1));
    select_ln40_fu_300_p3 <= 
        ap_const_lv8_FF when (icmp_ln40_fu_295_p2(0) = '1') else 
        add_ln40_reg_333;
        sext_ln22_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gx_l_fu_90_p2),10));

        sext_ln24_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gx_r_fu_138_p2),10));

        sext_ln28_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_204_p3),11));

        sext_ln30_1_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_fu_158_p2),11));

        sext_ln30_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_114_p3),11));

        sext_ln31_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln31_reg_318),11));

        sext_ln38_1_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ay_1_fu_249_p3),12));

        sext_ln38_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ax_1_fu_229_p3),12));

    sub_ln23_fu_108_p2 <= std_logic_vector(unsigned(zext_ln23_fu_100_p1) - unsigned(zext_ln23_1_fu_104_p1));
    sub_ln27_fu_148_p2 <= std_logic_vector(unsigned(zext_ln26_fu_82_p1) - unsigned(zext_ln26_2_fu_126_p1));
    sub_ln31_fu_190_p2 <= std_logic_vector(unsigned(gy_l_fu_184_p2) - unsigned(zext_ln26_1_fu_122_p1));
    tmp_5_fu_204_p3 <= (sub_ln27_reg_307 & ap_const_lv1_0);
    tmp_7_fu_235_p3 <= gy_fu_218_p2(10 downto 10);
    tmp_fu_114_p3 <= (sub_ln23_fu_108_p2 & ap_const_lv1_0);
    trunc_ln38_1_fu_269_p1 <= ay_1_fu_249_p3(8 - 1 downto 0);
    trunc_ln38_fu_265_p1 <= ax_1_fu_229_p3(8 - 1 downto 0);
    zext_ln22_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_val_int_reg),9));
    zext_ln23_1_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m2_val_int_reg),9));
    zext_ln23_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m0_val_int_reg),9));
    zext_ln24_1_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b2_val_int_reg),9));
    zext_ln24_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b2_val_int_reg),10));
    zext_ln26_1_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b1_val_int_reg),10));
    zext_ln26_2_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b1_val_int_reg),9));
    zext_ln26_3_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gy_r_fu_174_p2),10));
    zext_ln26_fu_82_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_val_int_reg),9));
end behav;
